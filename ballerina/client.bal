// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# Versions: <i>Tableau Server 2021.1 / Tableau Cloud March 2022 and later</i>
# 
#  This documentation describes the growing number OpenAPI endpoints  being released alongside more than 150 [classic REST endpoints](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_ref.htm)  that are currently in wide usage in the Tableau community.
# 
#  There are some differences users of the classic endpoints will recognize when viewing these new endpoints.
# 
#  - Request bodies for these new REST endpoints must  be formatted using JSON.
# 
#  - Endpoint URIs may contain a hyphen ('-') instead of an API version number, indicating that the resource is versioned separately from the numbered API release. For more information, see  [REST API and Resource Versions](https://help.tableau.com/current/api/rest_api/en-us/REST/rest_api_concepts_versions.htm).
# 
#  > Starting in Tableau Server 2022.1 / Tableau Cloud March 2022, differences between releases will be noted in this reference.To view the previous version of this reference, see [Tableau REST API OpenAPI Endpoints (v2021.4)](https://help.tableau.com/current/api/rest_api/en-us/REST/TAG/index.html#operation/addAnalyticsExtensionsConnection).
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "https://tableau.example.com") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    # Delete ask data lens - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/askdata/lenses/[string lensId](LensService_deleteLensHeaders headers = {}) returns TableauNlpLensPublicrestV1Getlensresponse|error {
        string resourcePath = string `/api/-/askdata/lenses/${getEncodedUri(lensId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete Identity Store
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful 
    resource isolated function delete api/\-/authn\-service/auth\-configurations/[int:Signed32 id](AuthnService_DeleteAuthConfigurationHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete Identity Store
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful 
    resource isolated function delete api/\-/authn\-service/identity\-pools/[string uuid](AuthnService_DeleteIdentityPoolHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/authn-service/identity-pools/${getEncodedUri(uuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete Identity Store
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful 
    resource isolated function delete api/\-/authn\-service/identity\-stores/[int:Signed32 id](AuthnService_DeleteIdentityStoreTAGHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/authn-service/identity-stores/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete metric definition
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/pulse/definitions/[string definitionId](MetricQueryService_DeleteDefinitionHeaders headers = {}) returns error? {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definitionId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete metric
    #
    # + metricId - _(Required)_ The LUID of the metric to be deleted.
    # + headers - Headers to be sent with the request 
    # + return - Successful! 
    resource isolated function delete api/\-/pulse/metrics/[string metricId](MetricQueryService_DeleteMetricHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/pulse/metrics/${getEncodedUri(metricId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/pulse/subscriptions/[string id](PulseSubscriptionService_DeleteSubscriptionHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/pulse/subscriptions/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Unblock dashboard extension on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/server/extensions/dashboard/blockListItems/[string blockListItemLuid](DashboardExtensionsServerSettingsService_deleteDashboardExtensionsBlockListItemHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems/${getEncodedUri(blockListItemLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Delete analytics extension connection from site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/site/extensions/analytics/connections/[string connectionLuid](AnalyticsExtensionsService_deleteAnalyticsExtensionsConnectionHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections/${getEncodedUri(connectionLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Remove current analytics extension connection for workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/site/extensions/analytics/workbooks/[string workbookLuid]/selected_connection(AnalyticsExtensionsService_deleteConnectionFromWorkbookHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbookLuid)}/selected_connection`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # Disallow dashboard extension on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function delete api/\-/settings/site/extensions/dashboard/safeListItems/[string safeListItemLuid](DashboardExtensionsSiteSettingsService_deleteDashboardExtensionsSafeListItemHeaders headers = {}) returns http:Response|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems/${getEncodedUri(safeListItemLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->delete(resourcePath, headers = httpHeaders);
    }

    # List ask data lenses in site - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/askdata/lenses(LensService_listLensesHeaders headers = {}) returns TableauNlpLensPublicrestV1Listlensesresponse|error {
        string resourcePath = string `/api/-/askdata/lenses`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get ask data lens - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/askdata/lenses/[string lensId](LensService_getLensHeaders headers = {}) returns TableauNlpLensPublicrestV1Getlensresponse|error {
        string resourcePath = string `/api/-/askdata/lenses/${getEncodedUri(lensId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/authn\-service/auth\-configurations(AuthnService_ListAuthConfigurationsHeaders headers = {}) returns TableauAuthnV1Listauthconfigurationsresponse|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/authn\-service/identity\-pools(map<string|string[]> headers = {}) returns TableauAuthnV1Listidentitypoolsresponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Identity Pool
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/authn\-service/identity\-pools/[string uuid](AuthnService_FindIdentityPoolByUuidHeaders headers = {}) returns TableauAuthnV1Findidentitypoolbyuuidresponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools/${getEncodedUri(uuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/authn\-service/identity\-stores(AuthnService_ListIdentityStoresTAGHeaders headers = {}) returns TableauAuthnV1Listidentitystoresresponse|error {
        string resourcePath = string `/api/-/authn-service/identity-stores`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get usage statistics for content item
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/content/usage\-stats/[string 'type]/[string luid](UsageStatsService_GetUsageStatsHeaders headers = {}) returns TableauUsagestatsV1Usagestats|error {
        string resourcePath = string `/api/-/content/usage-stats/${getEncodedUri('type)}/${getEncodedUri(luid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List metric definitions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/definitions(MetricQueryService_ListDefinitionsHeaders headers = {}, *MetricQueryService_ListDefinitionsQueries queries) returns TableauMetricqueryserviceV1Listdefinitionsresponse|error {
        string resourcePath = string `/api/-/pulse/definitions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get metric definition
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/definitions/[string definitionId](MetricQueryService_GetDefinitionHeaders headers = {}, *MetricQueryService_GetDefinitionQueries queries) returns TableauMetricqueryserviceV1Getdefinitionresponse|error {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definitionId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List metrics in definition
    #
    # + definitionId - _(Required)_ The LUID of the metric definition.
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/definitions/[string definitionId]/metrics(MetricQueryService_ListMetricsHeaders headers = {}, *MetricQueryService_ListMetricsQueries queries) returns TableauMetricqueryserviceV1Listmetricsresponse|error {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definitionId)}/metrics`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/definitions\:batchGet(MetricQueryService_BatchGetDefinitionsHeaders headers = {}, *MetricQueryService_BatchGetDefinitionsQueries queries) returns TableauMetricqueryserviceV1Batchgetdefinitionsresponse|error {
        string resourcePath = string `/api/-/pulse/definitions:batchGet`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get site entitlements
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/entitlements(MetricQueryService_GetEntitlementsHeaders headers = {}) returns TableauMetricqueryserviceV1Getentitlementsresponse|error {
        string resourcePath = string `/api/-/pulse/entitlements`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get metric
    #
    # + metricId - _(Required)_ The LUID of the metric to get.
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/metrics/[string metricId](MetricQueryService_GetMetricHeaders headers = {}) returns TableauMetricqueryserviceV1Getmetricresponse|error {
        string resourcePath = string `/api/-/pulse/metrics/${getEncodedUri(metricId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/metrics\:batchGet(MetricQueryService_BatchGetMetricsHeaders headers = {}, *MetricQueryService_BatchGetMetricsQueries queries) returns TableauMetricqueryserviceV1Batchgetmetricsresponse|error {
        string resourcePath = string `/api/-/pulse/metrics:batchGet`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/metrics\:followedMetricsGroups(PulseSubscriptionService_ListFollowedMetricsGroupsHeaders headers = {}, *PulseSubscriptionService_ListFollowedMetricsGroupsQueries queries) returns TableauPulseSubscriptionserviceV1Listfollowedmetricsgroupsresponse|error {
        string resourcePath = string `/api/-/pulse/metrics:followedMetricsGroups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List subscriptions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/subscriptions(PulseSubscriptionService_ListSubscriptionsHeaders headers = {}, *PulseSubscriptionService_ListSubscriptionsQueries queries) returns TableauPulseSubscriptionserviceV1Listsubscriptionsresponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/pulse/subscriptions/[string id](PulseSubscriptionService_GetSubscriptionHeaders headers = {}) returns TableauPulseSubscriptionserviceV1Getsubscriptionresponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/subscriptions\:batchGet(PulseSubscriptionService_BatchGetSubscriptionsHeaders headers = {}) returns TableauPulseSubscriptionserviceV1Batchgetsubscriptionsresponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions:batchGet`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    resource isolated function get api/\-/pulse/subscriptions\:batchGetMetricFollowerCounts(PulseSubscriptionService_BatchGetMetricFollowerCountsHeaders headers = {}, *PulseSubscriptionService_BatchGetMetricFollowerCountsQueries queries) returns TableauPulseSubscriptionserviceV1Batchgetmetricfollowercountsresponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions:batchGetMetricFollowerCounts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get content search results
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - Success <br /> <br /> Search requests return a JSON response body containing two forms of metadata: <br/><br/> -  **Metadata describing the search request**. <br />These properties are at the top level of the JSON hierarchy of the response body. To learn more, expand this 200 response section. <br/><br/> - **Metadata describing the items returned by the search**.<br /> Attributes shown for a given item in the 'items' array vary by the content type of the item (workbook, datasource, flow, ...), and include the full range of available attributes for that content type. 
    resource isolated function get api/\-/search(map<string|string[]> headers = {}, *ContentExplorationService_getSearchQueries queries) returns TableauSearchPageofcontentresponse|error {
        string resourcePath = string `/api/-/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get enabled state of analytics extensions on server
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/analytics(AnalyticsExtensionsService_getAnalyticsExtensionsServerSettingsHeaders headers = {}) returns TableauAnalyticsextensionsV1Serversettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List settings for dashboard extensions on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/dashboard(DashboardExtensionsServerSettingsService_getDashboardExtensionsServerSettingsHeaders headers = {}) returns TableauExtensionsDashboardV1Serversettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List blocked dashboard extensions on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/dashboard/blockListItems(DashboardExtensionsServerSettingsService_getDashboardExtensionsBlockListItemsHeaders headers = {}) returns TableauExtensionsDashboardV1Blocklistitems|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get blocked dashboard extension on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/server/extensions/dashboard/blockListItems/[string blockListItemLuid](DashboardExtensionsServerSettingsService_getDashboardExtensionsBlockListItemHeaders headers = {}) returns TableauExtensionsDashboardV1Blocklistitem|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems/${getEncodedUri(blockListItemLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get enabled state of analytics extensions on site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics(AnalyticsExtensionsService_getAnalyticsExtensionsSiteSettingsHeaders headers = {}) returns TableauAnalyticsextensionsV1Sitesettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List analytics extension connections on site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/connections(AnalyticsExtensionsService_getAnalyticsExtensionsConnectionsHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionmetadatalist|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get analytics extension details
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/connections/[string connectionLuid](AnalyticsExtensionsService_getAnalyticsExtensionsConnectionHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionitem|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections/${getEncodedUri(connectionLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List analytics extension connections of workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/workbooks/[string workbookLuid]/connections(AnalyticsExtensionsService_getConnectionOptionsForWorkbookHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionmetadatalist|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbookLuid)}/connections`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get current analytics extension for workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/analytics/workbooks/[string workbookLuid]/selected_connection(AnalyticsExtensionsService_getSelectedConnectionForWorkbookHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionmetadatalist|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbookLuid)}/selected_connection`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List dashboard extension settings of site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/dashboard(DashboardExtensionsSiteSettingsService_getDashboardExtensionsSiteSettingsHeaders headers = {}) returns TableauExtensionsDashboardV1Sitesettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # List allowed dashboard extensions on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/dashboard/safeListItems(DashboardExtensionsServerSettingsService_getDashboardExtensionsSafeListItemsHeaders headers = {}) returns TableauExtensionsDashboardV1Safelistitems|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get allowed dashboard extension on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function get api/\-/settings/site/extensions/dashboard/safeListItems/[string safeListItemLuid](DashboardExtensionsSiteSettingsService_getDashboardExtensionsSafeListItemHeaders headers = {}) returns TableauExtensionsDashboardV1Safelistitem|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems/${getEncodedUri(safeListItemLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Get Content Suggestions
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - OK 
    resource isolated function get api/\-/suggestions(map<string|string[]> headers = {}, *ContentExploration_getSuggestionsQueries queries) returns TableauSearchSearchresultsrepresentationv2|error {
        string resourcePath = string `/api/-/suggestions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update metric definition
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function patch api/\-/pulse/definitions/[string definitionId](TableauMetricqueryserviceV1Updatedefinitionrequest payload, MetricQueryService_UpdateDefinitionHeaders headers = {}) returns TableauMetricqueryserviceV1Updatedefinitionresponse|error {
        string resourcePath = string `/api/-/pulse/definitions/${getEncodedUri(definitionId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.UpdateDefinitionRequest+json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Update metric
    #
    # + metricId - _(Required)_ The LUID of the metric to be updated.
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function patch api/\-/pulse/metrics/[string metricId](TableauMetricqueryserviceV1Updatemetricrequest payload, MetricQueryService_UpdateMetricHeaders headers = {}) returns TableauMetricqueryserviceV1Updatemetricresponse|error {
        string resourcePath = string `/api/-/pulse/metrics/${getEncodedUri(metricId)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.UpdateMetricRequest+json");
        return self.clientEp->patch(resourcePath, request, httpHeaders);
    }

    # Create ask data lens - Retired in API 3.22
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/askdata/lenses(TableauNlpLensPublicrestV1Createlensrequest payload, LensService_createLensHeaders headers = {}) returns TableauNlpLensPublicrestV1Createlensresponse|error {
        string resourcePath = string `/api/-/askdata/lenses`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.nlp.lens.publicrest.v1.CreateLensRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/askdata/lenses/'import(TableauNlpLensPublicrestV1Importlensrequest payload, LensService_importLensHeaders headers = {}) returns TableauNlpLensPublicrestV1Importlensresponse|error {
        string resourcePath = string `/api/-/askdata/lenses/import`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.nlp.lens.publicrest.v1.ImportLensRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/authn\-service/auth\-configurations(TableauAuthnV1Registerauthconfigurationrequest payload, AuthnService_RegisterAuthConfigurationHeaders headers = {}) returns TableauAuthnV1Registerauthconfigurationresponse|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.RegisterAuthConfigurationRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/authn\-service/identity\-pools(TableauAuthnV1Registeridentitypoolrequest payload, AuthnService_RegisterIdentityPoolHeaders headers = {}) returns TableauAuthnV1Registeridentitypoolresponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.RegisterIdentityPoolRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/authn\-service/identity\-stores(TableauAuthnV1Registeridentitystorerequest payload, AuthnService_RegisterIdentityStoreTAGHeaders headers = {}) returns TableauAuthnV1Registeridentitystoreresponse|error {
        string resourcePath = string `/api/-/authn-service/identity-stores`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.RegisterIdentityStoreRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/content/usage\-stats(TableauUsagestatsV1Batchgetusagerequest payload, UsageStatsService_BatchGetUsageHeaders headers = {}) returns TableauUsagestatsV1Contentitemusagestatslist|error {
        string resourcePath = string `/api/-/content/usage-stats`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.usagestats.v1.BatchGetUsageRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create metric definition
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/definitions(TableauMetricqueryserviceV1Createdefinitionrequest payload, MetricQueryService_CreateDefinitionHeaders headers = {}) returns TableauMetricqueryserviceV1Createdefinitionresponse|error {
        string resourcePath = string `/api/-/pulse/definitions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.CreateDefinitionRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Generate current metric value insight bundle
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/insights/ban(TableauPulseInsightsserviceV1Generateinsightbundlebanrequest payload, PulseInsightsService_GenerateInsightBundleBANHeaders headers = {}) returns TableauPulseInsightsserviceV1Generateinsightbundlebanresponse|error {
        string resourcePath = string `/api/-/pulse/insights/ban`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.insightsservice.v1.GenerateInsightBundleBANRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Generate detail insight bundle
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/insights/detail(TableauPulseInsightsserviceV1Generateinsightbundledetailrequest payload, PulseInsightsService_GenerateInsightBundleDetailHeaders headers = {}) returns TableauPulseInsightsserviceV1Generateinsightbundledetailresponse|error {
        string resourcePath = string `/api/-/pulse/insights/detail`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.insightsservice.v1.GenerateInsightBundleDetailRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Generate springboard insight bundle
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/insights/springboard(TableauPulseInsightsserviceV1Generateinsightbundlespringboardrequest payload, PulseInsightsService_GenerateInsightBundleSpringboardHeaders headers = {}) returns TableauPulseInsightsserviceV1Generateinsightbundlespringboardresponse|error {
        string resourcePath = string `/api/-/pulse/insights/springboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.insightsservice.v1.GenerateInsightBundleSpringboardRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create metric
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/metrics(TableauMetricqueryserviceV1Createmetricrequest payload, MetricQueryService_CreateMetricHeaders headers = {}) returns TableauMetricqueryserviceV1Createmetricresponse|error {
        string resourcePath = string `/api/-/pulse/metrics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.CreateMetricRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/pulse/metrics\:getOrCreate(TableauMetricqueryserviceV1Getorcreatemetricrequest payload, MetricQueryService_GetOrCreateMetricHeaders headers = {}) returns TableauMetricqueryserviceV1Getorcreatemetricresponse|error {
        string resourcePath = string `/api/-/pulse/metrics:getOrCreate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.metricqueryservice.v1.GetOrCreateMetricRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Create subscription
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/pulse/subscriptions(TableauPulseSubscriptionserviceV1Createsubscriptionrequest payload, PulseSubscriptionService_CreateSubscriptionHeaders headers = {}) returns TableauPulseSubscriptionserviceV1Createsubscriptionresponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.subscriptionservice.v1.CreateSubscriptionRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    resource isolated function post api/\-/pulse/subscriptions\:batchCreate(TableauPulseSubscriptionserviceV1Batchcreatesubscriptionsrequest payload, PulseSubscriptionService_BatchCreateSubscriptionsHeaders headers = {}) returns TableauPulseSubscriptionserviceV1Batchcreatesubscriptionsresponse|error {
        string resourcePath = string `/api/-/pulse/subscriptions:batchCreate`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.pulse.subscriptionservice.v1.BatchCreateSubscriptionsRequest+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Block dashboard extension on server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/settings/server/extensions/dashboard/blockListItems(TableauExtensionsDashboardV1Blocklistitem payload, DashboardExtensionsServerSettingsService_createDashboardExtensionsBlockListItemHeaders headers = {}) returns TableauExtensionsDashboardV1Blocklistitem|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard/blockListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.BlockListItem+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Add analytics extension connection to site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/settings/site/extensions/analytics/connections(TableauAnalyticsextensionsV1Connectionitem payload, AnalyticsExtensionsService_addAnalyticsExtensionsConnectionHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionmetadatalist|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Allow dashboard extension on site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function post api/\-/settings/site/extensions/dashboard/safeListItems(TableauExtensionsDashboardV1Safelistitem payload, DashboardExtensionsServerSettingsService_createDashboardExtensionsSafeListItemHeaders headers = {}) returns TableauExtensionsDashboardV1Safelistitem|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard/safeListItems`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.SafeListItem+json");
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Update Identity Pool
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/authn\-service/auth\-configurations/[int:Signed32 id](TableauAuthnV1Updateauthconfigurationrequest payload, AuthnService_UpdateAuthConfigurationHeaders headers = {}) returns TableauAuthnV1Updateauthconfigurationresponse|error {
        string resourcePath = string `/api/-/authn-service/auth-configurations/${getEncodedUri(id)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.UpdateAuthConfigurationRequest+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update Identity Pool
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/authn\-service/identity\-pools/[string uuid](TableauAuthnV1Updateidentitypoolrequest payload, AuthnService_UpdateIdentityPoolHeaders headers = {}) returns TableauAuthnV1Updateidentitypoolresponse|error {
        string resourcePath = string `/api/-/authn-service/identity-pools/${getEncodedUri(uuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.authn.v1.UpdateIdentityPoolRequest+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Enable or disable analytics extensions on server
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/server/extensions/analytics(TableauAnalyticsextensionsV1Serversettings payload, AnalyticsExtensionsService_updateAnalyticsExtensionsServerSettingsHeaders headers = {}) returns TableauAnalyticsextensionsV1Serversettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ServerSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update dashboard extensions settings of server - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/server/extensions/dashboard(TableauExtensionsDashboardV1Serversettings payload, DashboardExtensionsServerSettingsService_updateDashboardExtensionsServerSettingsHeaders headers = {}) returns TableauExtensionsDashboardV1Serversettings|error {
        string resourcePath = string `/api/-/settings/server/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.ServerSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update enabled state of analytics extensions on site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/analytics(TableauAnalyticsextensionsV1Sitesettings payload, AnalyticsExtensionsService_updateAnalyticsExtensionsSiteSettingsHeaders headers = {}) returns TableauAnalyticsextensionsV1Sitesettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.SiteSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update analytics extension connection of site
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/analytics/connections/[string connectionLuid](TableauAnalyticsextensionsV1Connectionitem payload, AnalyticsExtensionsService_updateAnalyticsExtensionsConnectionHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionitem|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/connections/${getEncodedUri(connectionLuid)}`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ConnectionItem+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update analytics extension for workbook
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/analytics/workbooks/[string workbookLuid]/selected_connection(TableauAnalyticsextensionsV1Connectionmapping payload, AnalyticsExtensionsService_updateWorkbookWithConnectionHeaders headers = {}) returns TableauAnalyticsextensionsV1Connectionmapping|error {
        string resourcePath = string `/api/-/settings/site/extensions/analytics/workbooks/${getEncodedUri(workbookLuid)}/selected_connection`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.analyticsextensions.v1.ConnectionMapping+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }

    # Update dashboard extension settings of site - Retired in API 3.21
    #
    # + headers - Headers to be sent with the request 
    # + return - Successful. 
    resource isolated function put api/\-/settings/site/extensions/dashboard(TableauExtensionsDashboardV1Sitesettings payload, DashboardExtensionsSiteSettingsService_updateDashboardExtensionsSiteSettingsHeaders headers = {}) returns TableauExtensionsDashboardV1Sitesettings|error {
        string resourcePath = string `/api/-/settings/site/extensions/dashboard`;
        map<string|string[]> httpHeaders = getMapForHeaders(headers);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/vnd.tableau.extensions.dashboard.v1.SiteSettings+json");
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }
}
